{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CSSE4011 Documentation This site contains links to guides used in the CSSE4011 stages and project. See the links on the left side menu.","title":"Home"},{"location":"#csse4011-documentation","text":"This site contains links to guides used in the CSSE4011 stages and project. See the links on the left side menu.","title":"CSSE4011 Documentation"},{"location":"getting_started/","text":"CSIRO/CSSE4011 open repository setup guide Hardware JLink Debugger/Programmer e.g. JLink EDU Mini nrf52840 particle argon/xenon other boards may be supported, i.e nrf52840dk, boards that are supported are listed in ei_freertos/core_csiro/platform Software Installation: The repo may be setup for Linux, OSX, or WSL, this guide will be using Linux. It is not recommended to use a virtual machine due to extended compilation times. VScode https://code.visualstudio.com/Download $ cd ~/Downloads $ sudo dpkg -i code_1.26.0-1534177765_amd64.deb git $ sudo apt install git Python 3 should be installed by default on ubuntu make sure python3 install Python headers and static libraries $ sudo apt-get install python3-dev install pip3 $ sudo apt install python3-pip dialout group add user to dialout group to acces /dev/tty devices $ sudo gpasswd --add ${USER} dialout reset machine gcc-arm-none-eabi For Debian try: $ sudo apt-get install gcc-arm-none-eabi For Ubuntu try: $ sudo add-apt-repository ppa:team-gcc-arm-embedded/ppa $ sudo apt-get update $ sudo apt-get install gcc-arm-embedded Installing Segger JLink - download from https://www.segger.com/downloads/jlink/ - J-Link Software and Documentation pack for Linux, DEB installer, 64-bit $ sudo dpkg -i ~/Downloads/jlink_5.2.7_x86_64.deb Repository Setup Generate SSH Key $ ssh-keygen -t rsa -C \"example@example@uqconnect.edu.au\" $ ssh-add then copy the key from id_rsa.pub to your github account Set up environment variables add the following lines to ~/.bashrc export PATH=<ei-freertos-path>/tools:$PATH export PYTHONPATH=<ei-freertos-path>/pyclasses:$PYTHONPATH $ source ~/.bashrc Setup the Repository $ git clone https://github.com/csiro-wsn/ei-freertos.git $ ./repo_setup.sh Compile and flash an app: compiling the app low_power: $ cd apps/low_power $ make TARGET=argon debug -j flashing an app connect your jlink EDU mini verifying JLink verify it is plugged in correctly and recognises the device $ JLinkExe > connect > S > <Enter> If a Target device selection comes up, select nrf52840_xxAA, by nordic semiconductors, Cortex-M4 on subsequent connects it will be the default device flashing the app $ make TARGET=argon flashdbg -j blue LED should start blinking tips: $ make TARGET=argon help - generates help message $ make TARGET=argon jlinksn - get serial numbers of devices connected - useful for multiple devices connected $ make TARGET=argon JLINK=<serial number> - needed when multiple devices connected to computer or it will give you error, alternatively just take one out","title":"Getting Started"},{"location":"getting_started/#csirocsse4011-open-repository-setup-guide","text":"","title":"CSIRO/CSSE4011 open repository setup guide"},{"location":"getting_started/#hardware","text":"JLink Debugger/Programmer e.g. JLink EDU Mini nrf52840 particle argon/xenon other boards may be supported, i.e nrf52840dk, boards that are supported are listed in ei_freertos/core_csiro/platform","title":"Hardware"},{"location":"getting_started/#software-installation","text":"The repo may be setup for Linux, OSX, or WSL, this guide will be using Linux. It is not recommended to use a virtual machine due to extended compilation times. VScode https://code.visualstudio.com/Download $ cd ~/Downloads $ sudo dpkg -i code_1.26.0-1534177765_amd64.deb git $ sudo apt install git Python 3 should be installed by default on ubuntu make sure python3 install Python headers and static libraries $ sudo apt-get install python3-dev install pip3 $ sudo apt install python3-pip dialout group add user to dialout group to acces /dev/tty devices $ sudo gpasswd --add ${USER} dialout reset machine","title":"Software Installation:"},{"location":"getting_started/#gcc-arm-none-eabi","text":"For Debian try: $ sudo apt-get install gcc-arm-none-eabi For Ubuntu try: $ sudo add-apt-repository ppa:team-gcc-arm-embedded/ppa $ sudo apt-get update $ sudo apt-get install gcc-arm-embedded","title":"gcc-arm-none-eabi"},{"location":"getting_started/#installing-segger-jlink","text":"- download from https://www.segger.com/downloads/jlink/ - J-Link Software and Documentation pack for Linux, DEB installer, 64-bit $ sudo dpkg -i ~/Downloads/jlink_5.2.7_x86_64.deb","title":"Installing Segger JLink"},{"location":"getting_started/#repository-setup","text":"","title":"Repository Setup"},{"location":"getting_started/#generate-ssh-key","text":"$ ssh-keygen -t rsa -C \"example@example@uqconnect.edu.au\" $ ssh-add then copy the key from id_rsa.pub to your github account","title":"Generate SSH Key"},{"location":"getting_started/#set-up-environment-variables","text":"add the following lines to ~/.bashrc export PATH=<ei-freertos-path>/tools:$PATH export PYTHONPATH=<ei-freertos-path>/pyclasses:$PYTHONPATH $ source ~/.bashrc","title":"Set up environment variables"},{"location":"getting_started/#setup-the-repository","text":"$ git clone https://github.com/csiro-wsn/ei-freertos.git $ ./repo_setup.sh","title":"Setup the Repository"},{"location":"getting_started/#compile-and-flash-an-app","text":"","title":"Compile and flash an app:"},{"location":"getting_started/#compiling-the-app-low_power","text":"$ cd apps/low_power $ make TARGET=argon debug -j","title":"compiling the app low_power:"},{"location":"getting_started/#flashing-an-app","text":"connect your jlink EDU mini","title":"flashing an app"},{"location":"getting_started/#verifying-jlink","text":"verify it is plugged in correctly and recognises the device $ JLinkExe > connect > S > <Enter> If a Target device selection comes up, select nrf52840_xxAA, by nordic semiconductors, Cortex-M4 on subsequent connects it will be the default device","title":"verifying JLink"},{"location":"getting_started/#flashing-the-app","text":"$ make TARGET=argon flashdbg -j blue LED should start blinking","title":"flashing the app"},{"location":"getting_started/#tips","text":"$ make TARGET=argon help - generates help message $ make TARGET=argon jlinksn - get serial numbers of devices connected - useful for multiple devices connected $ make TARGET=argon JLINK=<serial number> - needed when multiple devices connected to computer or it will give you error, alternatively just take one out","title":"tips:"}]}